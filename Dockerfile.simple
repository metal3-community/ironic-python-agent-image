# syntax=docker/dockerfile:1-labs
# Simple demonstration of the multi-stage tiny-ipa build architecture

ARG TARGETARCH
ARG TINYIPA_REQUIRE_BIOSDEVNAME=true
ARG TINYIPA_REQUIRE_IPMITOOL=true

# Stage 1: Extract TinyCore base image
FROM debian:bookworm-slim as tinycore-extractor
ARG TARGETARCH

RUN if [ -z "${TARGETARCH}" ]; then \
      case "$(uname -m)" in \
        x86_64) TARGETARCH=amd64 ;; \
        aarch64) TARGETARCH=arm64 ;; \
        armv7l) TARGETARCH=arm ;; \
        *) echo "Unsupported architecture: $(uname -m)"; exit 1 ;; \
      esac; \
    fi

RUN apt-get update && apt-get install -y \
    curl \
    xz-utils \
    cpio \
    gzip \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build
RUN set -eux; \
    if [ -z "${TARGETARCH}" ]; then \
      case "$(uname -m)" in \
        x86_64) TARGETARCH=amd64 ;; \
        aarch64) TARGETARCH=arm64 ;; \
        armv7l) TARGETARCH=arm ;; \
        *) echo "Unsupported architecture: $(uname -m)"; exit 1 ;; \
      esac; \
    fi; \
    case "${TARGETARCH}" in \
        "amd64") \
            TC_URL="https://distro.ibiblio.org/tinycorelinux/15.x/x86_64/release/distribution_files/corepure64.gz"; \
            ;; \
        "arm64") \
            TC_URL="https://distro.ibiblio.org/tinycorelinux/15.x/aarch64/release/distribution_files/corepure64.gz"; \
            ;; \
        *) \
            echo "Unsupported architecture: ${TARGETARCH}"; \
            exit 1; \
            ;; \
    esac; \
    echo "Downloading TinyCore for ${TARGETARCH} from ${TC_URL}"; \
    curl -fSL "${TC_URL}" -o core.gz; \
    echo "Extracting TinyCore..."; \
    mkdir -p /rootfs; \
    cd /rootfs; \
    gzip -dc /build/core.gz | cpio -i; \
    echo "TinyCore extraction completed"

# Stage 2: TinyCore base setup
FROM scratch AS tinycore-base
COPY --from=tinycore-extractor /rootfs/ /

# Set up basic system structure
RUN mkdir -p /proc /sys /dev /tmp /var/log /etc

# Copy CA certificates for SSL
COPY --from=tinycore-extractor /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Set up git configuration for potential builds
RUN echo '[http]' > /etc/gitconfig && \
    echo '    sslCAInfo = /etc/ssl/certs/ca-certificates.crt' >> /etc/gitconfig

WORKDIR /home/tc

# Stage 3: Build stage (demonstrates the pattern from build-tinyipa.sh)
FROM tinycore-base AS tinyipa-build

USER root

# This would contain all the build tools and source compilation
# For demo purposes, we'll just create the expected directories
RUN echo "=== TinyIPA Build Stage ===" && \
    mkdir -p /tmp/qemu-utils /tmp/lshw-installed /tmp/biosdevname-installed /tmp/ipmitool /tmp/wheels /tmp/ipa-source && \
    echo "Build stage directories created - in real build this would contain:" && \
    echo "- QEMU 5.2.0 compilation for qemu-img" && \
    echo "- LSHW B.02.18 compilation for hardware detection" && \
    echo "- BIOSDEVNAME 0.7.2 compilation (if required)" && \
    echo "- IPMITOOL compilation from git hash 19d78782d795d0cf4ceefe655f616210c9143e62" && \
    echo "- Ironic Python Agent wheel building" && \
    \
    # Create placeholder files to demonstrate the pattern
    echo "placeholder" > /tmp/qemu-utils/.placeholder && \
    echo "placeholder" > /tmp/lshw-installed/.placeholder && \
    echo "placeholder" > /tmp/biosdevname-installed/.placeholder && \
    echo "placeholder" > /tmp/ipmitool/.placeholder && \
    echo "placeholder" > /tmp/wheels/.placeholder && \
    echo "placeholder" > /tmp/ipa-source/.placeholder

# Stage 4: Final runtime stage (demonstrates the pattern from finalise-tinyipa.sh)
FROM tinycore-base AS tinyipa

USER root

# Copy any built tools from build stage
COPY --from=tinyipa-build /tmp/qemu-utils /tmp/qemu-utils/
COPY --from=tinyipa-build /tmp/lshw-installed /tmp/lshw-installed/
COPY --from=tinyipa-build /tmp/biosdevname-installed /tmp/biosdevname-installed/
COPY --from=tinyipa-build /tmp/ipmitool /tmp/ipmitool/
COPY --from=tinyipa-build /tmp/wheels /tmp/wheelhouse/
COPY --from=tinyipa-build /tmp/ipa-source /tmp/ipa-source/

# Copy build files for configuration
COPY build_files/ /tmp/build_files/

# Set up the final TinyIPA environment 
RUN echo "=== Setting up TinyIPA Runtime ===" && \
    \
    # Set TARGETARCH for file selection
    if [ -z "${TARGETARCH:-}" ]; then \
      case "$(uname -m)" in \
        x86_64) TARGETARCH=amd64 ;; \
        aarch64) TARGETARCH=arm64 ;; \
        armv7l) TARGETARCH=arm ;; \
        *) echo "Unsupported architecture: $(uname -m)"; exit 1 ;; \
      esac; \
    fi && \
    \
    # This would normally install final packages from finalreqs.lst
    echo "Final package installation would happen here" && \
    \
    # Set up library paths
    mkdir -p /etc && \
    echo "/usr/local/lib" >> /etc/ld.so.conf && \
    \
    # Copy configuration files like finalise-tinyipa.sh does
    cp /tmp/build_files/bootlocal.sh /opt/ && \
    cp /tmp/build_files/dhcp.sh /etc/init.d/dhcp.sh && \
    cp /tmp/build_files/modprobe.conf /etc/modprobe.conf && \
    mkdir -p /tmp/overrides && \
    cp "/tmp/build_files/${TARGETARCH}/fakeuname" /tmp/overrides/uname && \
    cp /tmp/build_files/ntpdate /bin/ntpdate && \
    chmod 755 /bin/ntpdate && \
    \
    # Clean up build artifacts
    rm -rf /tmp/qemu-utils /tmp/lshw-installed /tmp/biosdevname-installed /tmp/ipmitool /tmp/wheelhouse /tmp/build_files /tmp/ipa-source && \
    \
    echo "TinyIPA runtime setup completed"

# Create the final initramfs demonstration
RUN echo "=== Creating TinyIPA initramfs ===" && \
    # Set TARGETARCH for kernel selection
    if [ -z "${TARGETARCH:-}" ]; then \
      case "$(uname -m)" in \
        x86_64) TARGETARCH=amd64 ;; \
        aarch64) TARGETARCH=arm64 ;; \
        armv7l) TARGETARCH=arm ;; \
        *) echo "Unsupported architecture: $(uname -m)"; exit 1 ;; \
      esac; \
    fi && \
    \
    # Create output directory and initramfs
    mkdir -p /output && \
    cd / && \
    find . -path ./output -prune -o -type f -print | cpio -o -H newc | gzip -9 > /output/tinyipa.gz && \
    echo "Created initramfs: /output/tinyipa.gz" && \
    ls -lh /output/tinyipa.gz

# Copy kernel (simplified - normally from tinycore-extractor)
RUN echo "=== Preparing kernel ===" && \
    # In real build, this would copy vmlinuz64 from the tinycore extraction
    echo "Kernel copy would happen here" && \
    echo "demo-kernel" > /output/tinyipa.vmlinuz && \
    echo "Created demo kernel: /output/tinyipa.vmlinuz"

# Switch back to tc user
USER tc
ENV HOME="/home/tc"

# Final output stage for easy file access
FROM scratch AS output
COPY --from=tinyipa /output/ /